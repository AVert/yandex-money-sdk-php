Представляем вашему вниманию библиотеку для использования API Яндекс.Денег. Возможности:
	- OAuth-авторизация пользователя;
	- реализованы вызовы API почти всех функций API Яндек.Денег (информация о счете, история операций, детальная информация по операциям, переводы денег другим пользователям);
	- безопасность работы (поддержка проверки цепочки сертификатов);
	- удобство работы (response'ы сервера представлены в виде объектов) и быстрый старт;
	- отностельно безопасное и простое решение хранения токенов пользователей с использованием шифрования и без использования БД, реализацию которого легко переписать под свои хранилища.

Описание.

Сама библиотека представляет собой файл цепочки сертификатов ym.crt и файл ym.php, который содержит:
	- программный интерфейс IYandexMoney; 
	- главный класс YandexMoney (реализация интерфейса);
	- класс-перечисление с правами доступа (scope);
	- Вспомогательные классы (response-объекты вывода результатов запросов к API).
Внимание: использует стандартные библиотеки cUrl и Mcrypt для http-запросов и шифрования соответственно.

Структура объкта YandexMoney:
	authorize - статический метод для инициации OAuth-авторизации. 
		На вход принимает идентификатор приложения, список прав доступа и URI редиректа после авторизации.
		Возвращает временный код.
	
	__construct - конструктор класса. 
		На вход принимает идентификатор приложения и путь к файлу ym.crt цепочки сертификатов (приложен к библиотеке).
	
	receiveOAuthToken - метод заврешния OAuth-аутентификации. Обменивает временный код на постоянный токен пользователя.
		На вход принимает код и URI для редиректа (должно совпадать с указанным при регистрации приложения)
		Возвращает токен пользователя.

	storeToken - метод сохраняет полученный токен в json-файл с шифрованием по ключу. Ключ зашит в код и представляет собой константу.
		На вход принимает идентификатор пользователя и токен.
	restoreToken - метод восстановливает сохраненный ранее токен.
		На вход принмает идентификатор пользователя.
		Возвращает токен пользователя.

	accountInfo - метод для получения информации о счете пользователя.
		На вход принимает токен пользователя.
		Возвращает экземпляр класса AccountInfoResponse, который содержит поля: номер счета, баланс, валюта счета.

	operationHistory - метод для получения истории операций пользователя. 
		На вход принимает токен пользователя, номер первой записи (постраничный вывод), количество операций и тип операций (депозит или оплата).
		Возвращает экземпляр класса operationHistoryResponse, который содержит код ошибки, если таковая произошла, номер записи следующей страницы, если таковая есть (постраничный вывод) и массив операций. Операции представляют собой объект Operation (сумма, время, и комментарии к операции).

	operationDetail - метод для получения детальной информации по операции из истории или платежей.
		На вход принимает токен пользователя и идентификатор операции.
		Возвращает экземпляр класса OperationDetailResponse, который унаследован от объекта Operation и предоставляет расширенную информацию по платежу/зачислению.

	requestPaymentP2P - метод перевода средств на счет другого пользователя. 
		На вход принимает токен пользователя, номер счета (или привязанного телефона) назначения, сумму и комментарий.
		Возврашает экземпляр класса RequestPaymentResponse, который содержит ошибку, если таковая произошла, информацию о статусе операции, идентификатор операции, контракт и баланс.
		
	processPayment - метод для подтверждения перевода, полученного при вызове requestPaymentP2P. 
		На вход принимает идентификатор запроса.
		Возвращает экземпляр класса ProcessPaymentResponse, который содержит информацию о статусе платежа, балнесе после проведения операции и идентификатор платежа.


Чтобы использовать библиотеку, опытным разработчикам будет достаточно просмотреть файл ym.php. 
Для тех, кто не будет устанавливать и смотреть подробные примеры, покажем пару вызовов. Для работы с API необходимо получить разрешение пользователя, то есть токен. Его можно получить следующими вызовами (к примеру, с допступом на просмотр информации о счете и историю операций):

	YandexMoney::authorize(Consts::CLIENT_ID, 'account-info operation-history', Consts::REDIRECT_URL);
	
	// затем на странице редиректа инициировать создание объекта и получение токена
	$ym = new YandexMoney(Consts::CLIENT_ID, Consts::CERTIFICATE_CHAIN_PATH);	
	$token = $ym->receiveOAuthToken($_GET['code'], Consts::REDIRECT_URL);

При создании объекта $ym ему передается идентификатор приложения и абсолютный путь на сервере к цепочке сертификатов (файл ym.crt). И то и другое обычно прописывается в константах в каком-нибудь модуле (consts.php в наших примерах). 
Ну и покажем, как получить информацию о счете пользователя. Также создаем объект и затем вызваем метод, передав ему токен пользователя:

	$ym = new YandexMoney(Consts::CLIENT_ID, Consts::CERTIFICATE_CHAIN_PATH);
	$accountInfoResponse = $ym->accountInfo($token);	

	print_r('Номер счета: ' . $accountInfoResponse->getAccount() . '<br>');
	print_r('Баланс: ' . $accountInfoResponse->getBalance() . '<br>');
	print_r('Код валюты: ' . $accountInfoResponse->getCurrency() . '<br>');	

Информация о счете получена, все предельно просто. С другими вызовами примерно тоже самое. Но, если вы не верите, то предлагаем вам посмотреть (а может и запустить) более полные примеры использования библиотеки.


Примеры использования.

Для успешного запуска примеров следует проделать ряд действий:
	- зарегестрировать приложение, т.е. получить идентификатор клиента (https://sp-money.yandex.ru/myservices/new.xml) и прописать его в константы примеров (consts.php);
	- установить какой-нибудь WAMP (Windows-Apache-MySQL-PHP) или LAMP сервер (http://en.wikipedia.org/wiki/Comparison_of_WAMPs);
	- скопировать файлы примеров и библиотеку в каталог www.	 
Подробнее см. в инструкции по запуску примеров (в архиве с исходниками или на bitbucket'е https://bitbucket.org/mdv/php-yandex.money-api-sdk/overview).

В комплекте примеров 5 файлов (один из которых файл css):
	- index.php - главный файл с которого все начинается. В нем есть небольшое описание и формочка с выбором списка прав, которые мы будем запрашивать у пользователя (если хотите, чтобы все примеры отработали без ошибок - не снимайте галочек). На форме есть кнопка "Получить токен", которая делат запрос к файлу auth.php;
	- auth.php - маленький php-файл, который собирает из POST-параметров формы index.php права, которые мы указали, и делает вызов статического метода authorize нашей библиотеки. Этот метод обращается к серверу Яндекс.Денег, получает разрешение пользователя и возвращает на страницу redirected.php;
	- redirected.php - файл куда приходит временный код от вызова метода authorize. В этом файле мы меняем его на постоянный токен пользователя и делаем примеры вызовов других методов;
	- consts.php - в нем 3 константы: идентификатор приложения, адрес страницы редиректа нашего приложения и абсолютный путь к файлу ym.crt на сервере.

